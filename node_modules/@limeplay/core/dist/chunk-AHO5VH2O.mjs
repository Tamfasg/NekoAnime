import {
  clamp
} from "./chunk-OIVZDOAO.mjs";

// src/hooks/useTimelineHover.ts
import {
  useHover,
  useMove
} from "@use-gesture/react";
import { useState } from "react";
function useTimelineHover({
  sliderHandlerConfig,
  ref,
  onSlideStart,
  onSlide,
  onSlideEnd
}) {
  const [isHovering, setIsHovering] = useState(false);
  const [value, setValue] = useState(0);
  const { disabled } = sliderHandlerConfig;
  const dragHandler = ({
    active,
    xy: [ox, oy],
    event
  }) => {
    const {
      min,
      max,
      step = 5,
      skipStep = 30,
      orientation: o9n = "horizontal",
      dir = "ltr",
      inverted = false
    } = sliderHandlerConfig;
    const { height, width, top, left } = ref.current.getBoundingClientRect();
    let newValue = value;
    if (event instanceof PointerEvent) {
      const clientPosition = o9n === "vertical" ? oy : ox;
      const sliderSize = o9n === "vertical" ? height : width;
      const sliderPosition = o9n === "vertical" ? top : left;
      const relativePosition = clientPosition - sliderPosition;
      const percentage = relativePosition / sliderSize;
      newValue = percentage * (max - min) + min;
      if (inverted || dir === "rtl" && o9n === "horizontal")
        newValue = max - newValue + min;
    }
    newValue = clamp(newValue, min, max);
    setValue(newValue);
    return newValue;
  };
  useHover(
    ({ hovering }) => {
      setIsHovering(hovering);
    },
    {
      target: ref,
      enabled: !disabled
    }
  );
  useMove(dragHandler, {
    target: ref,
    enabled: !disabled
  });
  return {
    value,
    isHovering
  };
}

export {
  useTimelineHover
};
